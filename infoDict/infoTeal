## BASICS
	A smart contract for the Algorand blockchain consists of two different programs called approval program and clear program. In PyTeal both of these programs are generally created in the same Python file.

	The approval program is responsible for processing all application calls to the contract, except for the clear call. 
	The approval program is responsible for implementing most of the logic of an application. 
	Like smart signatures, this program will succeed only if one nonzero value is left on the stack upon program completion or the return opcode is called with a positive value on the top of the stack.

	The clear program is used to handle accounts using the clear call to remove the smart contract from their balance record. This program will pass or fail the same way the approval program does.

-----

## COMPILE:
	compile_contract.py

## ALGORAND SANDBOX:
	"Startup algo evn"
		./sandbox up -v
		 
	"Account list"	
		./sandbox goal account list
		OUTPUT: 
			[offline]	G2PRVQEEMNASDHM7B6VHP2H455TCKZVSDCDACX36I5AU2LDMS7LQ4UIDYI	G2PRVQEEMNASDHM7B6VHP2H455TCKZVSDCDACX36I5AU2LDMS7LQ4UIDYI	4000068000000000 microAlgos
			[offline]	H2CJKVL537LTG47OYO3KMYUU4GNZZZSS2JGQYJ5ES5LGZ72YC5FNHOPVTQ	H2CJKVL537LTG47OYO3KMYUU4GNZZZSS2JGQYJ5ES5LGZ72YC5FNHOPVTQ	1000017000000000 microAlgos
			[online]	ONNWFTFMMCW2GCLUEX7BDGQEAKZ4V4KY2DSXCU3OUGVQ3QZHSGEWDJQWVU	ONNWFTFMMCW2GCLUEX7BDGQEAKZ4V4KY2DSXCU3OUGVQ3QZHSGEWDJQWVU	4000068000000000 microAlgos
			
	"Deploy contracts"
		./sandbox copyTo ${PATH_TO_APPROVAL_PROGRAM.teal}
		./sandbox copyTo ${PATH_TO_CLEAR_PROGRAM.teal}
		
	"Create application"
		./sandbox goal app create --creator ${ACCOUNT_ADDRESS} --approval-prog marketplace_approval.teal --clear-prog marketplace_clear.teal 
			--note tutorial-marketplace:uv1 --global-byteslices 3 --global-ints 2 --local-byteslices 0 --local-ints 0 --app-arg str:TestName 
			--app-arg str:TestImage --app-arg str:TestDescription --app-arg int:1000000
		{
			--approval-prog = "approval.val" --clear-prog = "clear.val" --note = "name:uv1" + args (Everything has been declared inside the contract!)
		}
		
	"Delete application"
		./sandbox goal app delete --app-id ${APP_ID} --from ${ACCOUNT_ADDRESS}
		
-----

## CODING

	Execute in local:
		link: https://github.com/algorand/sandbox
		Algorand sandbox 

	# Note importance: 
		link: https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md
		The goal of these conventions is to make it simpler for block explorers and indexers to parse the data in the note fields and filter transactions of certain dApps.

	# Cond:
		link: https://pyteal.readthedocs.io/en/v0.5.1/control_structures.html
		Checks for different conditions, in order.
		Cond( condition1 -> action, .... )
		if confition1 != 0 -> action

	# If:
		link: https://pyteal.readthedocs.io/en/v0.5.1/control_structures.html
		If(condition).Then(action1).Else(action2)

	# And

	# Seq:
		link: https://pyteal.readthedocs.io/en/stable/control_structures.html
		Sequance stack of TEAL, executes operations in order.
		Only the last operation should return something.
		Seq(operation1, operation2, .... , operation_that_returns)
		If you must include an operation that returns something -> Pop() "push outside of the stack"
		Seq(Pop(operation_that_returns), .... , operations_that_returns)

	# Approve() == Return(Int(1))
	# Reject() == Return(Int(0))

	#App:
		#globalPut():
		globalPut(key, value)
		
		#globalGet():
		globalGet(key)
		
	# Gtnx:
		link: https://pyteal.readthedocs.io/en/v0.5.3_a/atomic_transfer.html
		Atomic transfer



######

Phrases:
1		2		3		4		5	6		7		8		9		10		11	12			13		14		15		16		17		18		19		20		21		22		23		24		25
goddess, april, clip, scrub, type, vague, obvious, romance, approve, tragic, say, wedding, flight, young, jacket, grab, carpet, blossom, priority, card, robust, behind, document, above, cover


## Web3

# NEXT # npx create-next-app@latest --ts 				[not working ?]

# RECT # npx create-react-app algorand-marketplace

cd algorand-marketplace

npm install react-scripts@4.0.3

npm install react@17.0.2 react-dom@17.0.2 @testing-library/react@12.1.4 react-error-overlay@6.0.9

"src/index.js"
	import React from 'react';
	import ReactDOM from 'react-dom';
	import App from './App';
	import reportWebVitals from './reportWebVitals';

	ReactDOM.render(
		<React.StrictMode>
			<App/>
		</React.StrictMode>,
		document.getElementById('root'),
	);

	// If you want to start measuring performance in your app, pass a function
	// to log results (for example: reportWebVitals(console.log))
	// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
	reportWebVitals();

npm install algosdk

npm install @randlabs/myalgo-connect

npm install raw-loader --save-dev

npm start

create "src/utils/constants.js"
	...

create "src/contracts/" and insert .teal files

create "src/utils/conversions.js"
	...

create "scr/utils/marketplace.js"
	...

add marketplace to "scr/App.js"
	...

"polyfill node core modules in webpack 5" ERROR resolved using "react-app-rewired"

npm install react-bootstrap bootstrap bootstrap-icons prop-types react-jazzicon bignumber.js

npm install react-toastify@9.0.3 --save-exact

add imports in "src/index.js"

add "algodecimals" in "src/utils/constants.js"

